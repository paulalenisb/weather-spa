{"version":3,"sources":["components/Weather/WeatherInput.js","components/TodayWeather/TodayWheaterInfo.js","components/data.js","App.js","reportWebVitals.js","index.js"],"names":["WheaterInput","query","setQuery","search","className","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","onKeyPress","TodayWheaterInfo","weather","sunsetTime","sys","sunset","dateSunset","Date","toLocaleString","hour","minute","sunriseTime","sunrise","dateSunrise","useState","showMore","setShowMore","name","country","Math","round","main","temp","temp_max","temp_min","onClick","close","wind","speed","humidity","pressure","Api","key","base","App","setWeather","nextDays","setNextDays","date","setDate","forecast","list","console","log","weather5Days","data","i","length","push","day","dt_txt","slice","time","location","Promise","all","fetch","then","a","today","fiveDays","json","currentlyWeather","nextDaysForecast","catch","err","data-toggle","id","autoComplete","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","allowDataOverflow","Tooltip","Legend","Line","stroke","activeDot","r","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51cd7b2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default function WheaterInput({ query, setQuery, search }) {\r\n    \r\n\r\n    return (\r\n\r\n        <div className=\"card card-body\">\r\n        <form onSubmit={e => {e.preventDefault()}}>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\"  \r\n                    placeholder=\"Location\" \r\n                    className=\"form-control\" \r\n                    onChange={e => setQuery(e.target.value)}\r\n                    value={query}\r\n                    onKeyPress={search}/>\r\n            </div>\r\n            {/* <button className=\"btn btn-success btn-block\">\r\n                Get Weather\r\n            </button> */}\r\n        </form>\r\n    </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TodayWheaterInfo({weather}) {\r\n    const sunsetTime = weather.sys.sunset;\r\n    const timeSunset = new Date(sunsetTime * 1e3)\r\n    const dateSunset = timeSunset.toLocaleString([], {hour: '2-digit', minute: '2-digit'});\r\n\r\n    const sunriseTime = weather.sys.sunrise;\r\n    const timeSunrise = new Date(sunriseTime * 1e3)\r\n    const dateSunrise = timeSunrise.toLocaleString([], {hour: '2-digit', minute: '2-digit'});\r\n\r\n\r\n    const [showMore, setShowMore] = useState(false)\r\n\r\n    return (\r\n    <div>\r\n        <div className='card card-body'>\r\n            <h5 className='mb-1'>{weather.name}, {weather.sys.country}</h5>\r\n            <p className='lead'>{Math.round(weather.main.temp)}°c</p>\r\n            <p className='lead'>{weather.weather[0].main}</p>\r\n        </div>\r\n\r\n        <div className=\"card-group\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Temp max {Math.round(weather.main.temp_max)}°c</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Temp min {Math.round(weather.main.temp_min)}°c</h5>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/* {\r\n            if (showMore === false) {\r\n\r\n            }\r\n        } */}\r\n        <button \r\n            type=\"button\" \r\n            className=\"btn btn-primary btn-lg btn-block\"\r\n            onClick={()=>setShowMore(close => !close)}>More info</button>\r\n        {\r\n            showMore ? (\r\n            <div className=\"card-group\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Wind Speed {Math.round(weather.wind.speed)} meter/sec</h5>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Humidity {Math.round(weather.main.humidity)}%</h5>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Pressure {Math.round(weather.main.pressure)} hPa</h5>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Sunrise time {dateSunrise}</h5>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Sunset time {dateSunset}</h5>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            ) \r\n        : null } \r\n\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\n","\r\nconst Api = {\r\n    key: 'dcd0b5d180bd96b258e48eafd54c0351',\r\n    base: 'https://api.openweathermap.org/data/2.5/'\r\n  }\r\n  \r\n  const ApiNext = {\r\n    key: '7de64b624c60c1e3a2f491d2d252b826',\r\n    base: 'https://api.openweathermap.org/data/2.5/'\r\n  }\r\n\r\n  export {Api, ApiNext}","import React, {useState} from 'react';\nimport WeatherInput from './components/Weather/WeatherInput';\nimport TodayWeatherInfo from './components/TodayWeather/TodayWheaterInfo';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  } from 'recharts';\n\nimport {Api} from './components/data';\n\n\nexport default function App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [nextDays, setNextDays] = useState({});\n  const [date, setDate] = useState('today')\n\n  const search = location => {\n      \n      if (location.key === \"Enter\") {\n          Promise.all([\n              fetch(`${Api.base}weather?q=${query}&units=metric&APPID=${Api.key}`),\n              fetch(`${Api.base}forecast?q=${query}&units=metric&APPID=${Api.key}`)\n          ])\n          .then(async ([today, fiveDays]) => {\n              const currentlyWeather = await today.json();\n              const nextDaysForecast = await fiveDays.json()\n              setWeather(currentlyWeather);\n              setNextDays(nextDaysForecast);\n              setQuery('');\n              console.log(currentlyWeather,nextDaysForecast)\n          })\n          .catch((err) => {\n              console.log(err);\n          })\n      }}\n\n      const forecast = nextDays.list;\n\n      console.log(forecast);\n\n      const weather5Days = []\n      let data = []\n\n\n      if (typeof nextDays.list != \"undefined\") {\n          for (let i = 0; i < forecast.length; i += 8) {\n              weather5Days.push(forecast[i])};\n\n          data = [\n              {day: `${weather5Days[0].dt_txt.slice(8,10)}`, temp_min: `${weather5Days[0].main.temp_min}`, temp_max: `${weather5Days[0].main.temp_max}`, time:  `${weather5Days[0].weather.main}` },\n              {day: `${weather5Days[1].dt_txt.slice(8,10)}`, temp_min: `${weather5Days[1].main.temp_min}`, temp_max: `${weather5Days[1].main.temp_max}`,},\n              {day: `${weather5Days[2].dt_txt.slice(8,10)}`, temp_min: `${weather5Days[2].main.temp_min}`, temp_max: `${weather5Days[2].main.temp_max}`},\n              {day: `${weather5Days[3].dt_txt.slice(8,10)}`, temp_min: `${weather5Days[3].main.temp_min}`, temp_max: `${weather5Days[3].main.temp_max}`,},\n              {day: `${weather5Days[4].dt_txt.slice(8,10)}`, temp_min: `${weather5Days[4].main.temp_min}`, temp_max: `${weather5Days[4].main.temp_max}`,}\n          ]\n      }\n\n\n        return (\n            \n        <div className='container p-4 '>\n            <div className='row'>\n                <div className='col-md-10 mx-auto'>\n                    <WeatherInput\n                        data={Api}\n                        query={query}\n                        setQuery={setQuery}\n                        search={search}\n                        />\n    \n                    <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                        <label className=\"btn btn-primary active\">\n                            <input \n                                type=\"radio\" \n                                name=\"options\" \n                                id=\"option1\" \n                                autoComplete=\"off\" \n                                onClick={(e) => setDate(e.target.value)}\n                                value='today'\n                                /> Today\n                        </label>\n                        <label className=\"btn btn-primary\">\n                            <input \n                                type=\"radio\" \n                                name=\"options\" \n                                id=\"option2\" \n                                autoComplete=\"off\"\n                                onClick={(e) => setDate(e.target.value)}\n                                value='days'/> 5 days\n                        </label>\n                        </div>\n    \n                    {(typeof weather.main != \"undefined\") && (date==='today') ? (\n                       <div>\n                            <TodayWeatherInfo\n                            weather={weather}/>         \n                       </div> \n                    ) : ('')}\n    \n                    {(typeof nextDays.list != \"undefined\")  && (date==='days') ? (\n                        <div>\n                            <div className=\"card\">\n                                <div className=\"card-body center\">\n                                    <LineChart\n                                        width={500}\n                                        height={300}\n                                        data={data}\n                                        margin={{top: 5, right: 100, left: 0, bottom: 5,}}>\n                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                <XAxis dataKey='day'/>\n                                                <XAxis dataKey='time'/>\n                                                <YAxis domain={[0, ' + 1000']}          allowDataOverflow={true} />\n                                                <Tooltip />\n                                                <Legend />\n                                                <Line type=\"monotone\"                   dataKey='temp_min' stroke=\"#4582ec\" activeDot={{  r: 8 }} />\n                                                <Line type=\"monotone\" dataKey='temp_max'  stroke=\"#000\" activeDot={{ r: 8 }} />\n                                        </LineChart>\n                                </div>\n                            </div>\n                        </div>\n                    ) : ('')} \n                </div>\n            </div>\n        </div>\n        )\n    }\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}